{"version":3,"sources":["components/Navigation/Navigation.js","components/ImageForm/ImageForm.js","components/ImageSample/ImageSample.js","components/ImageDescription/ImageDescription.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navigation","classes","className","AppBar","position","Toolbar","Typography","variant","display","flexDirection","alignItems","ImageForm","onInputChange","onButtonSubmit","style","marginTop","textAlign","TextField","width","id","label","onChange","required","Button","marginBottom","onClick","ImageSample","imageURL","faceBox","box","map","points","i","image","document","getElementById","Number","height","key","top","top_row","right","right_col","bottom","bottom_row","left","left_col","justifyContent","padding","margin","borderRadius","border","alt","src","ImageDescription","modelType","color","colors","backgroundColor","w3c","hex","Math","floor","value","app","Clarifai","App","apiKey","INITIAL_STATE","input","calculateFaceLocation","data","boxArray","outputs","regions","dataEntry","push","region_info","bounding_box","setState","model","name","displayFaceBox","e","target","faceDetect","models","predict","FACE_DETECT_MODEL","state","then","response","console","log","catch","err","colorDetect","COLOR_MODEL","Grid","container","item","xs","Paper","this","md","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d3976d7.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navigation = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton> */}\n          <Typography variant=\"h6\" className={classes.title}>\n           Image Recognition App\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Navigation","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, TextField, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n}));\n\nconst ImageForm = ({ onInputChange, onButtonSubmit }) => {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.root}>\n        <Typography style={{marginTop: '1rem', textAlign: 'center'}} >This App Will Detect Faces & Colours In Your Image Using The Clarifai API.</Typography> \n        <Typography style={{marginTop: '2rem'}}>Enter A URL and hit 'Detect'</Typography>\n      <TextField style={{marginTop: '1rem', width: '70vw'}} id=\"standard-basic\" label=\"Image Link\" onChange={onInputChange} required/>\n      <Button style={{marginTop: '1rem', marginBottom: '1rem'}} variant=\"contained\" onClick={onButtonSubmit}>Detect</Button>\n    </form>\n  );\n};\n\nexport default ImageForm;","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport './faceBox.css'\n\nconst ImageSample = ({ imageURL, box }) => {\n\n    const faceBox = box.map( (points,i) => {\n\n        const image = document.getElementById('inputImage')\n        const width = Number(image.width)\n        const height = Number(image.height)\n\n        return (\n            <div key={i}\n                className='bounding-box'\n                style={{\n                    top: points.top_row * height,\n                    right: width - (points.right_col * width),\n                    bottom: height - (points.bottom_row * height),\n                    left: points.left_col * width\n                }}>\n            </div>\n        )\n    })\n    \n     \n\n    return (\n        <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', padding: '1rem'}}>\n            <Typography style={{marginBottom: '1rem'}} variant='h6'>Your Image</Typography>\n            \n            <div style={{position: 'relative'}} >\n                <img \n                    id='inputImage'\n                    style={{width: '70vw', height: 'auto', margin: '0 auto', borderRadius: '20px', border: '1px solid black'}}\n                    alt='imagerecog' \n                    src={imageURL}/>\n                {faceBox}\n            </div>\n        </div>\n    )\n}\n\nexport default ImageSample\n","import React from 'react';\nimport { Typography} from '@material-ui/core';\n\nconst ImageDescription = ({modelType, colors}) => {\n\n    const color = colors.map((color,i) => {\n        return (\n                <div key={i} style={{margin: '.5rem', borderRadius: '10px', border: '1px solid black', padding: '.5rem', textAlign: 'center'}}>\n                    <div style={{margin: '0 auto', width: '50px', height: '50px', backgroundColor: `${color.w3c.hex}`, borderRadius: '10px', marginTop: '.5rem', marginBottom: '.5rem'}}></div>\n                        {/* <Typography>Hex: {color.w3c.hex} </Typography>\n                        <Typography>Color: {color.w3c.name}  </Typography> */}\n                        <Typography>Image Value {Math.floor((Number(color.value) * 100))} % </Typography>\n                </div>\n        )\n    })\n\n    return (\n        <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', padding: '1rem'}}>\n            <Typography variant='h6'>Image Model Description</Typography>\n            <hr/>\n            { modelType !== '' ? <Typography variant='button'>Image Type: {modelType}</Typography>: ''}\n            <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\n            \n                <Typography variant='button'>Colors:</Typography>\n                <div style={{display: 'flex', flexDirection: 'column'}}>\n                    {color}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageDescription\n","import React, { Fragment } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport ImageForm from './components/ImageForm/ImageForm';\nimport ImageSample from './components/ImageSample/ImageSample';\nimport ImageDescription from './components/ImageDescription/ImageDescription';\nimport { Grid, Paper } from '@material-ui/core'\nimport Clarifai from 'clarifai';\n\nconst app = new Clarifai.App({\n  apiKey: 'dc35407eeac045149df0601ce8c81558'\n });\n\n const INITIAL_STATE = {\n      input: '',\n      imageURL: '',\n      box: [],\n      modelType: '',\n      colors: []\n }\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {...INITIAL_STATE}\n  }\n\n  calculateFaceLocation = data => {\n    const boxArray = []\n    if(data.outputs[0].data.regions){ \n    data.outputs[0].data.regions.map( dataEntry => {\n      return boxArray.push(dataEntry.region_info.bounding_box);\n    })\n    this.setState({\n      modelType: data.outputs[0].model.name\n    })\n  }\n    return boxArray\n  }\n\n  displayFaceBox = box => {\n    this.setState({ box })\n  }\n\n  onInputChange = e => {\n    this.setState({input: e.target.value})\n  }\n\n  faceDetect = () => {\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n    .then(response =>  {\n      console.log(response)\n      this.displayFaceBox(this.calculateFaceLocation(response)) })\n    .catch(err => console.log(err));\n  }\n\n  colorDetect = () => {\n    app.models.predict(Clarifai.COLOR_MODEL, this.state.input)\n    .then(response => {\n      this.setState({colors: [...response.outputs[0].data.colors]})\n    })\n    .catch(err => console.log(err))\n  }\n\n  onButtonSubmit = e => {\n    this.setState({\n      imageURL: this.state.input,\n      box: [],\n      modelType: '',\n      colors: []\n    })\n    this.faceDetect()\n    this.colorDetect()\n  }\n\n  render(){\n    return (\n      <div>\n        <Navigation/>\n        <Grid container>\n          <Grid item xs={12}>\n              <Paper style={{margin: '1rem', padding: '1rem'}}>\n                <ImageForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\n              </Paper>\n            </Grid>\n            { this.state.imageURL !== '' ?\n            <Fragment>\n              <Grid item md={6} xs={12}>\n                <Paper style={{margin: '1rem', padding: '1rem'}}>\n                  <ImageSample box={this.state.box} imageURL={this.state.imageURL}/>\n                </Paper>\n              </Grid>\n              <Grid item md={6} xs={12}>\n                <Paper style={{margin: '1rem', padding: '1rem'}}>\n                  <ImageDescription modelType={this.state.modelType} colors={this.state.colors}/>\n                </Paper>\n              </Grid>\n            </Fragment> : '' }\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}